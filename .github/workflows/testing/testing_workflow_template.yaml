name: Testing Workflow Template

on:
  workflow_call:
    inputs:
      test_paths:
        required: true
        type: string
      use_lfs:
        required: false
        type: boolean
        default: true

jobs:
  common-test-template:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11"]
    env:
      PICSELLIA_TEST_TOKEN: ${{ secrets.PICSELLIA_TEST_TOKEN }}
      PICSELLIA_TEST_HOST: ${{ vars.PICSELLIA_TEST_HOST }}
    steps:
      - uses: actions/checkout@v3
        with:
          lfs: ${{ inputs.use_lfs }}

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8
          pip install picsellia
          pip install -r requirements-dev.txt

      - name: Extract test data
        if: ${{ inputs.use_lfs }}
        run: |
          unzip -o tests/data.zip -d tests/
          echo "Listing contents of tests/data:"
          ls -R tests/data/

      - name: Lint with flake8
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics --exclude=tests/ --max-line-length=88

      - name: Test with pytest
        run: |
          echo "Test paths: ${{ inputs.test_paths }}"
          COV_ARGS=""
          IFS=' ' read -r -a paths_array <<< "${{ inputs.test_paths }}"
          for path in "${paths_array[@]}"; do
            module_path=$(echo "$path" | sed 's|tests|src|g')
            if [[ -d "$module_path" ]]; then
              for module in $(find "$module_path" -type d); do
                module=${module//\//.}
                module=${module#src.}
                COV_ARGS="$COV_ARGS --cov=src.$module"
              done
            elif [[ -f "$module_path.py" ]]; then
              # Assume it's a direct Python file
              file_module=${module_path#src/}
              file_module=${file_module%.py}
              COV_ARGS="$COV_ARGS --cov=src.$file_module"
            fi
          done
          echo "Running pytest with coverage on: $COV_ARGS"
          pytest ${{ inputs.test_paths }} $COV_ARGS --cov-report=xml

      - name: Upload coverage reports to Codecov
        if: secrets.CODECOV_TOKEN != ''
        uses: codecov/codecov-action@v4.0.1
        with:
          file: ./coverage.xml
          fail_ci_if_error: true
          token: ${{ secrets.CODECOV_TOKEN }}
          slug: picselliahq/picsellia-training-engine
